{
  "timestamp": "2025-10-26T06:15:39.230377",
  "operating_system": {
    "system": "Darwin",
    "release": "25.0.0",
    "version": "Darwin Kernel Version 25.0.0: Wed Sep 17 21:41:45 PDT 2025; root:xnu-12377.1.9~141/RELEASE_ARM64_T6000",
    "machine": "arm64",
    "processor": "arm"
  },
  "python_environment": {
    "python_version": "3.12.4",
    "python_executable": "/Users/cyl/miniconda3/bin/python",
    "venv_exists": false,
    "venv_path": null,
    "conda_env": "base",
    "virtual_env": null,
    "active_env": "conda:base"
  },
  "editor_environment": {
    "detected_editors": [
      "vscode"
    ],
    "term_program": "vscode",
    "term": "xterm-256color",
    "shell": "/bin/zsh"
  },
  "ai_assistant": {
    "detected_assistants": [
      "cursor_ai",
      "github_copilot"
    ],
    "cursorrules_exists": true,
    "copilot_instructions_exists": true,
    "primary_assistant": "github_copilot"
  },
  "project_context": {
    "project_name": "scenara",
    "project_path": "/Users/cyl/projects/scenara",
    "cursorrules_exists": true,
    "cursorrules_size": 83073,
    "has_requirements_txt": true,
    "has_meeting_prep_requirements": true,
    "has_venv": false,
    "tools_directory": true
  },
  "recommended_tools": {
    "cursor_ai": [
      "Use .cursorrules as primary configuration",
      "Task management with [X] and [ ] markers",
      "Real-time lesson learning integration",
      "Scratchpad functionality for planning",
      "Automatic project context awareness"
    ],
    "github_copilot": [
      "Read .cursorrules file first (mandatory)",
      "Follow .github/copilot-instructions.md workflow",
      "Respect completed/pending task states",
      "Apply lessons learned automatically",
      "Use established coding patterns"
    ],
    "python_development": [
      "Use ./venv Python environment",
      "Install from requirements_meeting_prep.txt",
      "Configure Python environment before tool usage",
      "Use tools/llm_api.py for LLM integration",
      "Follow timezone handling best practices"
    ],
    "meeting_intelligence": [
      "tools/meeting_extractor.py - Comprehensive meeting data",
      "daily_meeting_viewer.py - Beautiful formatted output",
      "tools/web_scraper.py - Research capabilities",
      "Graph Explorer - Microsoft calendar access",
      "tools/screenshot_utils.py - UI verification"
    ],
    "platform_strategy": [
      "ü™ü DevBox Windows: Data extraction + MSAL authentication",
      "   ‚Üí Use SilverFlow for Microsoft Graph API access",
      "   ‚Üí GPT-4.1/GPT-5 for enterprise LLM processing",
      "   ‚Üí Extract calendar/teams/documents data",
      "üçé macOS: Data processing + Local LLM",
      "   ‚Üí Use Ollama (gpt-oss:20b) for LLM processing",
      "   ‚Üí Process DevBox-extracted data files",
      "   ‚Üí Generate collaboration intelligence",
      "üí° HYBRID WORKFLOW: DevBox extract ‚Üí Transfer ‚Üí macOS process"
    ],
    "darwin_specific": [
      "Use zsh shell (default)",
      "Ollama (gpt-oss:20b) for local LLM processing",
      "Process DevBox-extracted JSON files",
      "Command: python tools/collaborator_discovery.py --calendar-data <file>",
      "Microsoft Edge for Graph API authentication",
      "AppleScript for automation when needed"
    ]
  }
}